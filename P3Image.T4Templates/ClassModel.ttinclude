<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="$(SolutionDir)\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ assembly name="$(ProjectDir)\Domain.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#><#+



public class ClassSet{
	public List<ClassModel> Classes{get;set;}
	public void AddClass(ClassModel classModel){
		if(this.Classes==null)
			Classes=new List<ClassModel>();
		Classes.Add(classModel);
    }

	public string ToCamelCase(String str)
    {
        return Char.ToLowerInvariant(str[0]) + str.Substring(1);
    }

	

	public String ToUnderscore(String input)
        {
            string pattern = "([a-z])([A-Z]+)";
            string replacement = "$1_$2";
            Regex rgx = new Regex(pattern);
            var result = rgx.Replace(input, replacement);
            return result;
        }

		public String ToSpacedName(String input)
        {
            string pattern = "([a-z])([A-Z]+)";
            string replacement = "$1 $2";
            Regex rgx = new Regex(pattern);
            var result = rgx.Replace(input, replacement);
            return result;
        }

	public ClassSet Load(){
		

		Assembly models = Assembly.GetAssembly(typeof(P3Image.Domain.Entities.Category));
		var types = models.GetTypes(); 
		 
		types =types.Where(x => x.FullName.Contains("P3Image.Domain.Entities") && x.Name!="PeriodicityType" && x.Name!="" && x.Name!="MyRole" && x.Name!="MyUserRole" && x.Name!="MyRole" && x.Name!="MyUserClaim" && x.Name!="MyUserLogin" ).ToArray();       
		GC.SuppressFinalize(models);
		models = null;

		foreach (Type type in types)
		{
			if((type.IsClass || type.IsInterface) && !type.IsAbstract){
				var classModel = new ClassModel(){
					Name=type.Name
				};
				foreach(var prop in type.GetProperties()){
				var attrs=  prop.GetCustomAttributes(true);
					classModel.AddField(new Field(){
						Name = prop.Name,
						DataType = prop.PropertyType.Name,
						SqlType = ConvertSql(prop.PropertyType.Name),
						IsClass = (prop.PropertyType.Namespace.Contains("Domain") && !prop.PropertyType.IsEnum) || prop.PropertyType.Namespace.Contains("List") || prop.PropertyType.Namespace.Contains("Collections"),
						IsNotMapped = (attrs !=null && attrs.Select(x=>x.ToString()).Any(z=>z.Contains("NotMapped"))),
					});
				}
				AddClass(classModel);
            }
		}
		return this;
    }

	public string ConvertSql(string name){
	var result=name;
		switch(name.ToLower()){
			case "string":
			result = "nvarchar(max)";
			break;
			case "nullable`1":
			result= "decimal(18,2)";
			break;
			case "int32":
			result="INT";
			break;
		}
		return result;
	}
	
}

public class ClassModel
{
    public String Name { get; set; }
	public List<Field> Fields {get;set;}
	public void AddField(Field field){
		if(this.Fields==null)
			Fields=new List<Field>();
		Fields.Add(field);
    }

}

public class Field
{
    public String Name { get; set; }	
    public String DataType { get; set; }
	public String SqlType {get;set;}
	public bool IsClass { get; set; }
	public bool IsNotMapped {get;set;}
}
#>
<#+
bool DoesFileExist(string filename)
{            
    return File.Exists(Path.Combine(GetCurrentDirectory(),filename));    
}
// Get current  folder directory
string GetCurrentDirectory()
{
    return System.IO.Path.GetDirectoryName(Host.TemplateFile);
}
#>