<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#//@ include file="main.ttinclude" #>
<#@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);
var classSet = new ClassSet();
var classes = new ClassSet().Load().Classes.OrderBy(u => u.Name);

foreach(var classModel in classes){#>
<#
		manager.StartNewFile(""+classModel.Name+ "Map.cs","P3Image.Infra.Data","EF\\Mappings\\Generated",null);
#>
using System.Data.Entity.ModelConfiguration;
using P3Image.Domain.Entities;

namespace P3Image.Infra.Data.EF.Mappings
{
    public partial class <#=classModel.Name#>Map : EntityTypeConfiguration<<#=classModel.Name#>>
    {
        public void Map()
        {		    

			// Properties
<# foreach(var field in classModel.Fields){#>
<# if(!field.IsClass && !field.IsNotMapped) {#>
            this.Property(t => t.<#= field.Name #>).HasColumnName("<#= classSet.ToUnderscore(field.Name).ToUpper() #>");
<#}}#>


        }

		/*
        public <#=classModel.Name#>Map()
        {
			this.HasKey(x=>x.Id);
		    this.Map();			
            this.ToTable("TB_<#=classSet.ToUnderscore(classModel.Name).ToUpper() #>");        
        }
		*/
    }
}

<#
manager.EndBlock();
}
#>
<#
manager.StartNewFile("P3ImageContextMap.cs","P3Image.Infra.Data","EF\\Context",null);
#>
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using P3Image.Domain.Entities;
using P3Image.Infra.Data.EF.Mappings;
using P3Image.Infra.Data.Repositories;

namespace P3Image.Infra.Data.EF.Context
{
    public partial class P3ImageContext : DbContext
    {
        /*static P3ImageContext()
        {
            Database.SetInitializer<P3ImageContext>(null);
        }

        public P3ImageContext()
            : base("Name=P3ImageContext")
        {
        }*/
<#
			foreach (var type in classes)
{#>
		public DbSet<<#= type.Name#>> <#= type.Name#> { get; set; }
<#}#>

        protected void Map(DbModelBuilder modelBuilder)
        {
<#
			foreach (var type in classes)
{#>
			modelBuilder.Configurations.Add(new <#= type.Name#>Map());
<#}#>
            
        }
    }
}
<#
manager.EndBlock();
#><#
manager.Process();
#>